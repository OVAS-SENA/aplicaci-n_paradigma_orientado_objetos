(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["tema3"],{"24b6":function(a,e,s){a.exports=s.p+"img/img2.af81caa5.svg"},"25b0":function(a,e,s){a.exports=s.p+"img/img1.b53c6205.svg"},"530a":function(a,e,s){a.exports=s.p+"img/img2.08ef504d.png"},"64b7":function(a,e,s){a.exports=s.p+"img/img21.b4635ca0.svg"},"65f2":function(a,e,s){a.exports=s.p+"img/img3.88dda77c.png"},"7d4d":function(a,e,s){a.exports=s.p+"img/img2m.688fd300.svg"},b021:function(a,e,s){a.exports=s.p+"img/img3.61a01a2c.svg"},ca52:function(a,e,s){a.exports=s.p+"img/img4.9b71ccbd.svg"},e183:function(a,e,s){a.exports=s.p+"img/img1.e4d3f20c.png"},e36f:function(a,e,s){a.exports=s.p+"img/img7.84db665b.svg"},eb46:function(a,e,s){"use strict";s.r(e);var t=function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("div",{staticClass:"curso-main-container pb-3"},[s("BannerInterno"),a._m(0)],1)},i=[function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"container tarjeta tarjeta--blanca p-4 p-md-5 mb-5"},[t("div",{staticClass:"titulo-principal color-acento-contenido",attrs:{"data-aos":"flip-up"}},[t("div",{staticClass:"titulo-principal__numero"},[t("span",[a._v("3")])]),t("h1",[a._v("Comunicación entre clases")])]),t("p",{attrs:{"data-aos":"fade-right"}},[a._v("Las clases, así como los objetos, no operan de manera aislada. La Programación Orientada a Objetos (POO) busca simular las aplicaciones del mundo real de la manera más precisa posible, lo cual implica reflejar las relaciones entre clases y objetos de forma adecuada. De este modo, la comunicación entre clases se facilita exclusivamente a través de sus interfaces públicas.")]),t("p",{staticClass:"mb-5",attrs:{"data-aos":"fade-right"}},[a._v("Existen tres tipos fundamentales de relaciones entre objetos:")]),t("div",{staticClass:"row justify-content-center mb-5"},[t("div",{staticClass:"col-md-8 col-lg mb-4 mb-lg-0",attrs:{"data-aos":"fade-right"}},[t("div",{staticClass:"row"},[t("div",{staticClass:"col-12 mx-0"},[t("figure",[t("img",{staticClass:"m-auto",attrs:{src:s("e183"),alt:""}})])]),t("div",{staticClass:"col-12"},[t("div",{staticClass:"p-4 bg-c37"},[t("p",{staticClass:"text-center"},[t("b",[a._v("Asociación")])]),t("p",{staticClass:"mb-0"},[a._v("Describe cómo los objetos se relacionan y se utilizan entre sí.")])])])])]),t("div",{staticClass:"col-md-8 col-lg mb-4 mb-lg-0",attrs:{"data-aos":"fade-down"}},[t("div",{staticClass:"row"},[t("div",{staticClass:"col-12 mx-0"},[t("figure",[t("img",{staticClass:"m-auto",attrs:{src:s("530a"),alt:""}})])]),t("div",{staticClass:"col-12"},[t("div",{staticClass:"p-4 bg-c37"},[t("p",{staticClass:"text-center"},[t("b",[a._v("Agregación/Composición")])]),t("p",{staticClass:"mb-0"},[a._v("Define una relación en la que un objeto está compuesto por uno o más objetos, mostrando una relación de tipo 'parte-todo'.")])])])])]),t("div",{staticClass:"col-md-8 col-lg",attrs:{"data-aos":"fade-left"}},[t("div",{staticClass:"row"},[t("div",{staticClass:"col-12 mx-0"},[t("figure",[t("img",{staticClass:"m-auto",attrs:{src:s("65f2"),alt:""}})])]),t("div",{staticClass:"col-12"},[t("div",{staticClass:"p-4 bg-c37"},[t("p",{staticClass:"text-center"},[t("b",[a._v("Generalización/Especialización (Herencia)")])]),t("p",{staticClass:"mb-0"},[a._v("Expresa una jerarquía entre clases donde una clase derivada (subclase) hereda comportamientos y atributos de una clase base (superclase), permitiendo la reutilización y extensión de código.")])])])])])]),t("div",{attrs:{id:"t_3_1"}}),t("div",{staticClass:"row mb-4",attrs:{"data-aos":"fade-down"}},[t("div",{staticClass:"col-auto bg-c12"},[t("div",{staticClass:"px-3 pb-0"},[t("div",{staticClass:"row align-items-end"},[t("div",{staticClass:"col-auto px-0"},[t("figure",{staticClass:"fig-p1"},[t("img",{staticClass:"m-auto",staticStyle:{width:"50px"},attrs:{src:s("fdcd"),alt:""}})])]),t("div",{staticClass:"col"},[t("h3",{staticClass:"text-white"},[a._v("Implementación de asociaciones")])])])])])]),t("p",{staticClass:"mb-5",attrs:{"data-aos":"fade-right"}},[a._v("En Java, la implementación de la asociación se lleva a cabo mediante campos de instancia. Esta relación puede ser bidireccional, donde cada clase posee una referencia hacia la otra. Tanto la agregación como la composición son variantes específicas de relaciones de asociación. A continuación, se detallan estos tipos de relaciones:")]),t("div",{staticClass:"row justify-content-center mb-5"},[t("div",{staticClass:"col-lg-10"},[t("div",{staticClass:"p-4 bg-c8",attrs:{"data-aos":"fade-right"}},[t("p",[t("b",[a._v("Asociación unidireccional")])]),t("div",{staticClass:"hr1"}),t("p",[a._v("Una asociación unidireccional ocurre cuando una clase está vinculada a otra, pero solo una de ellas conoce la existencia de la otra. Esto significa que un objeto de la primera clase puede acceder a los miembros de la segunda clase, pero no a la inversa.")]),t("p",[a._v("Para implementar una asociación unidireccional en Java, se debe incluir una referencia en la clase que conoce a la otra. Esto se logra declarando un atributo del tipo de la clase conocida dentro de la clase que posee el conocimiento.")]),t("p",[a._v("Por ejemplo, en una relación entre una clase "),t("b",[a._v("Pedido")]),a._v(" y una clase "),t("b",[a._v("Cliente")]),a._v(", la clase "),t("b",[a._v("Pedido")]),a._v(" puede tener una referencia a la clase "),t("b",[a._v("Cliente")]),a._v(" para saber a quién pertenece, pero la clase "),t("b",[a._v("Cliente")]),a._v(" no necesita tener una referencia a la clase "),t("b",[a._v("Pedido")]),a._v(" si la lógica del negocio no requiere que un cliente conozca sus pedidos.")]),t("p",{staticClass:"mb-4"},[a._v("Aquí está cómo se podría ver esto en el código:")]),t("div",{staticClass:"row justify-content-center mb-4"},[t("div",{staticClass:"col-lg-8"},[t("div",{staticClass:"row"},[t("div",{staticClass:"col-12"},[t("div",{staticClass:"px-4 py-3 bg-c14"},[t("figure",[t("img",{staticStyle:{width:"50px"},attrs:{src:s("e36f"),alt:""}})])])]),t("div",{staticClass:"col-12"},[t("div",{staticClass:"px-4 py-3 bg-c15"},[t("pre",[t("p",{staticClass:"mb-0"},[a._v("public class Cliente {")]),t("p",{staticClass:"mb-0"},[a._v("    private String nombre;")]),t("p",{staticClass:"mb-0"},[a._v("    // Otros atributos y métodos del Cliente")]),t("p",{staticClass:"mb-0"},[a._v("}")]),t("p",{staticClass:"mb-0"},[a._v(" ")]),t("p",{staticClass:"mb-0"},[a._v("public class Pedido {")]),t("p",{staticClass:"mb-0"},[a._v("    private Cliente cliente; // Referencia unidireccional")]),t("p",{staticClass:"mb-0"},[a._v("    private double total;")]),t("p",{staticClass:"mb-0"},[a._v(" ")]),t("p",{staticClass:"mb-0"},[a._v("    public Pedido(Cliente cliente) {")]),t("p",{staticClass:"mb-0"},[a._v("        this.cliente = cliente;")]),t("p",{staticClass:"mb-0"},[a._v("    }")]),t("p",{staticClass:"mb-0"},[a._v(" ")]),t("p",{staticClass:"mb-0"},[a._v("    // Otros atributos y métodos del Pedido")]),t("p",{staticClass:"mb-0"},[a._v(" ")]),t("p",{staticClass:"mb-0"},[a._v("}")])])])])])])]),t("p",[a._v("En este caso, "),t("b",[a._v("Pedido")]),a._v(" conoce a #"),t("b",[a._v("Cliente")]),a._v(", pero "),t("b",[a._v("Cliente")]),a._v(" no tiene conocimiento de Pedido, lo que hace que la relación sea unidireccional desde "),t("b",[a._v("Pedido")]),a._v(" hacia "),t("b",[a._v("Cliente")]),a._v(".")])])])]),t("div",{staticClass:"row justify-content-center mb-5"},[t("div",{staticClass:"col-lg-10"},[t("div",{staticClass:"p-4 bg-c8",attrs:{"data-aos":"fade-left"}},[t("p",[t("b",[a._v("Asociación bidireccional")])]),t("div",{staticClass:"hr1"}),t("p",[a._v("En una asociación bidireccional, dos clases están vinculadas entre sí de tal manera que ambas pueden conocer la existencia y utilizar los miembros de la otra. Esto significa que un objeto de una clase mantiene una referencia a uno o varios objetos de la otra clase y viceversa; ambos tienen la capacidad de interactuar entre sí.")]),t("p",[a._v("Para implementar una asociación bidireccional en Java, se deben crear instancias mutuas en ambas clases. Cada clase tendrá un atributo que referencia a la otra, y típicamente se proporcionarán métodos para establecer y modificar estas referencias de manera controlada.")]),t("p",[a._v("Tomando como ejemplo una relación entre "),t("b",[a._v("Cliente")]),a._v(" y "),t("b",[a._v("Cuenta")]),a._v(", no solo el "),t("b",[a._v("Cliente")]),a._v(" tendría una "),t("b",[a._v("Cuenta")]),a._v(", sino que la "),t("b",[a._v("Cuenta")]),a._v(" también tendría una referencia a su "),t("b",[a._v("Cliente")]),a._v(" para formar una relación bidireccional completa.")]),t("p",{staticClass:"mb-4"},[a._v("Aquí se muestra cómo se podría representar en el código:")]),t("div",{staticClass:"row justify-content-center mb-4"},[t("div",{staticClass:"col-lg-8"},[t("div",{staticClass:"row"},[t("div",{staticClass:"col-12"},[t("div",{staticClass:"px-4 py-3 bg-c14"},[t("figure",[t("img",{staticStyle:{width:"50px"},attrs:{src:s("e36f"),alt:""}})])])]),t("div",{staticClass:"col-12"},[t("div",{staticClass:"px-4 py-3 bg-c15"},[t("pre",[t("p",{staticClass:"mb-0"},[a._v("public class Cliente {")]),t("p",{staticClass:"mb-0"},[a._v("    private String nombre;")]),t("p",{staticClass:"mb-0"},[a._v("    private Cuenta cuenta; // Referencia bidireccional a Cuenta")]),t("p",{staticClass:"mb-0"},[a._v(" ")]),t("p",{staticClass:"mb-0"},[a._v("    // Constructor, getters y setters")]),t("p",{staticClass:"mb-0"},[a._v(" ")]),t("p",{staticClass:"mb-0"},[a._v("    public void vincularCuenta(Cuenta cuenta) {")]),t("p",{staticClass:"mb-0"},[a._v("        this.cuenta = cuenta;")]),t("p",{staticClass:"mb-0"},[a._v("        cuenta.vincularCliente(this); // Establece la referencia bidireccional")]),t("p",{staticClass:"mb-0"},[a._v("    }")]),t("p",{staticClass:"mb-0"},[a._v("}")]),t("p",{staticClass:"mb-0"},[a._v(" ")]),t("p",{staticClass:"mb-0"},[a._v("public class Cuenta {")]),t("p",{staticClass:"mb-0"},[a._v("    private double saldo;")]),t("p",{staticClass:"mb-0"},[a._v("    private Cliente cliente; // Referencia bidireccional a Cliente")]),t("p",{staticClass:"mb-0"},[a._v(" ")]),t("p",{staticClass:"mb-0"},[a._v("    // Constructor, getters y setters")]),t("p",{staticClass:"mb-0"},[a._v(" ")]),t("p",{staticClass:"mb-0"},[a._v("    public void vincularCliente(Cliente cliente) {")]),t("p",{staticClass:"mb-0"},[a._v("        this.cliente = cliente;")]),t("p",{staticClass:"mb-0"},[a._v("        // Si es necesario, también establecer la referencia desde Cliente a Cuenta")]),t("p",{staticClass:"mb-0"},[a._v("        if (cliente.getCuenta() != this) {")]),t("p",{staticClass:"mb-0"},[a._v("            cliente.vincularCuenta(this);")]),t("p",{staticClass:"mb-0"},[a._v("        }")]),t("p",{staticClass:"mb-0"},[a._v("    }")]),t("p",{staticClass:"mb-0"},[a._v("}")])])])])])])]),t("p",[a._v("En este código, tanto la clase "),t("b",[a._v("Cliente")]),a._v(" como la clase "),t("b",[a._v("Cuenta")]),a._v(" tienen métodos que permiten vincular una a la otra. Es importante manejar estas referencias cuidadosamente para evitar bucles infinitos o inconsistencias en las relaciones. Cuando se establece la vinculación desde una instancia de "),t("b",[a._v("Cliente")]),a._v(" a "),t("b",[a._v("Cuenta")]),a._v(", también se llama a un método en "),t("b",[a._v("Cuenta")]),a._v(" para establecer la vinculación inversa, asegurando así una asociación bidireccional coherente.")])])])]),t("div",{attrs:{id:"t_3_2"}}),t("div",{staticClass:"row mb-4",attrs:{"data-aos":"fade-down"}},[t("div",{staticClass:"col-auto bg-c12"},[t("div",{staticClass:"px-3 pb-0"},[t("div",{staticClass:"row align-items-end"},[t("div",{staticClass:"col-auto px-0"},[t("figure",{staticClass:"fig-p1"},[t("img",{staticClass:"m-auto",staticStyle:{width:"50px"},attrs:{src:s("fdcd"),alt:""}})])]),t("div",{staticClass:"col"},[t("h3",{staticClass:"text-white"},[a._v("Implementación de composición/agregación")])])])])])]),t("p",{staticClass:"mb-5",attrs:{"data-aos":"fade-right"}},[a._v('La agregación es una relación entre clases que modela una jerarquía de tipo "todo-parte", donde las partes pueden existir independientemente del todo. En cambio, la composición es una forma específica de agregación en la que las partes están exclusivamente asociadas a un único todo y su existencia depende de ese todo.')]),t("div",{staticClass:"row justify-content-center mb-5"},[t("div",{staticClass:"col-lg-10"},[t("div",{staticClass:"p-4 bg-c28",attrs:{"data-aos":"fade-down"}},[t("div",{staticClass:"row align-items-center"},[t("div",{staticClass:"col-md-auto mb-4 mb-md-0"},[t("figure",[t("img",{staticClass:"m-auto",staticStyle:{width:"90px"},attrs:{src:s("25b0"),alt:""}})])]),t("div",{staticClass:"col"},[t("p",{staticClass:"mb-0"},[a._v("En Java, la composición se implementa creando una clase que contiene objetos de otras clases como atributos privados, inicializándolos generalmente dentro del constructor de la clase contenedora para asegurar el acoplamiento de sus ciclos de vida.")])])])])])]),t("div",{attrs:{id:"t_3_3"}}),t("div",{staticClass:"row mb-4",attrs:{"data-aos":"fade-down"}},[t("div",{staticClass:"col-auto bg-c12"},[t("div",{staticClass:"px-3 pb-0"},[t("div",{staticClass:"row align-items-end"},[t("div",{staticClass:"col-auto px-0"},[t("figure",{staticClass:"fig-p1"},[t("img",{staticClass:"m-auto",staticStyle:{width:"50px"},attrs:{src:s("fdcd"),alt:""}})])]),t("div",{staticClass:"col"},[t("h3",{staticClass:"text-white"},[a._v("Implementación de herencia")])])])])])]),t("p",{attrs:{"data-aos":"fade-right"}},[a._v("La herencia es el mecanismo en la programación orientada a objetos que permite que una clase, conocida como subclase, herede propiedades y comportamientos de otra clase, llamada superclase.")]),t("p",{staticClass:"mb-5",attrs:{"data-aos":"fade-right"}},[t("b",[a._v("Por ejemplo")]),a._v(", a partir de la clase "),t("b",[a._v("Persona")]),a._v(", es posible definir una subclase "),t("b",[a._v("Empleado")]),a._v(", que hereda las características de "),t("b",[a._v("Persona")]),a._v(". La herencia permite la reutilización de código y la extensión de funcionalidades. En Java, la herencia se implementa mediante la palabra clave "),t("b",[t("i",[a._v("extends")])]),a._v(", lo que indica que la subclase "),t("b",[a._v("Empleado")]),a._v(" adquiere los métodos y atributos accesibles de la clase "),t("b",[a._v("Persona")]),a._v(".")]),t("div",{staticClass:"row justify-content-center mb-5"},[t("div",{staticClass:"col-lg-10"},[t("div",{staticClass:"p-5 bg-c3",attrs:{"data-aos":"fade-left"}},[t("div",{staticClass:"titulo-sexto color-acento-contenido"},[t("p",{staticClass:"mb-0"},[t("b",[a._v("Figura 2.")]),a._v(" Ejemplo de herencia en UML")])]),t("figure",{staticClass:"d-none d-lg-block"},[t("img",{staticClass:"m-auto",staticStyle:{width:"680px"},attrs:{src:s("24b6"),alt:"La figura presenta un ejemplo diagrama de clases UML que incluye la clase Persona con tres atributos privados: nombre, apellido y documento, además de dos métodos públicos: getNombre y getApellido. De esta clase derivan las clases Cliente, que tiene un atributo privado categoría y un método público mostrarDatos, y Empleado, con un atributo privado sueldo y un método público mostrarEmpleados. Las relaciones de herencia se muestran mediante flechas que conectan Cliente y Empleado con la clase Persona."}})]),t("figure",{staticClass:"d-block d-lg-none"},[t("img",{staticClass:"m-auto",staticStyle:{width:"300px"},attrs:{src:s("7d4d"),alt:"La figura presenta un ejemplo diagrama de clases UML que incluye la clase Persona con tres atributos privados: nombre, apellido y documento, además de dos métodos públicos: getNombre y getApellido. De esta clase derivan las clases Cliente, que tiene un atributo privado categoría y un método público mostrarDatos, y Empleado, con un atributo privado sueldo y un método público mostrarEmpleados. Las relaciones de herencia se muestran mediante flechas que conectan Cliente y Empleado con la clase Persona."}})])])])]),t("div",{staticClass:"row mb-5"},[t("div",{staticClass:"col-auto d-none d-md-block",attrs:{"data-aos":"fade-right"}},[t("figure",{staticClass:"mt-1"},[t("img",{staticStyle:{width:"70px"},attrs:{src:s("64b7"),alt:""}})])]),t("div",{staticClass:"col",attrs:{"data-aos":"fade-left"}},[t("p",[a._v("La superclase "),t("b",[a._v("Persona")]),a._v(" posee los atributos nombre, apellido y documento, que son igualmente necesarios para las clases Cliente y Empleado. La herencia permite la reutilización de código, de modo que las clases derivadas no necesitan declarar nuevamente estos atributos, ya que los heredan directamente de la clase "),t("b",[a._v("Persona")]),a._v(".")]),t("p",{staticClass:"mb-0"},[a._v("Para implementar la relación de herencia del ejemplo que incluye a las clases "),t("b",[a._v("Persona")]),a._v(", "),t("b",[a._v("Cliente")]),a._v(" y "),t("b",[a._v("Empleado")]),a._v(" en Java, se procedería de la siguiente manera:")])])]),t("div",{staticClass:"row justify-content-center"},[t("div",{staticClass:"col-lg-10 mb-4"},[t("div",{staticClass:"p-4 bg-c8",attrs:{"data-aos":"fade-right"}},[t("div",{staticClass:"row align-items-center"},[t("div",{staticClass:"col-md-auto mb-4 mb-md-0"},[t("figure",[t("img",{staticClass:"m-auto",staticStyle:{width:"70px"},attrs:{src:s("b021"),alt:""}})])]),t("div",{staticClass:"col"},[t("p",{staticClass:"mb-0"},[a._v("Se crea la clase "),t("b",[a._v("Persona")]),a._v(", la superclase, con sus atributos, constructores y métodos "),t("b",[a._v("“get”")]),a._v(" y "),t("b",[a._v("“set”")]),a._v(".")])])])])]),t("div",{staticClass:"col-lg-10"},[t("div",{staticClass:"p-4 bg-c28",attrs:{"data-aos":"fade-left"}},[t("div",{staticClass:"row align-items-center"},[t("div",{staticClass:"col-md-auto mb-4 mb-md-0"},[t("figure",[t("img",{staticClass:"m-auto",staticStyle:{width:"70px"},attrs:{src:s("ca52"),alt:""}})])]),t("div",{staticClass:"col"},[t("p",{staticClass:"mb-0"},[a._v("Se crea la clase "),t("b",[a._v("Cliente")]),a._v(" con su propio atributo categoría y su método "),t("b",[a._v("mostrarDatos")]),a._v(". Para heredar los atributos de la superclase "),t("b",[a._v("Persona")]),a._v(", se utiliza la palabra reservada "),t("b",[t("i",[a._v("“extends”")])]),a._v(".")])])])])])])])}],c={name:"Tema3",data:function(){return{}},mounted:function(){var a=this;this.$nextTick((function(){a.$aosRefresh()}))},updated:function(){this.$aosRefresh()}},l=c,o=s("2877"),n=Object(o["a"])(l,t,i,!1,null,null,null);e["default"]=n.exports},fdcd:function(a,e,s){a.exports=s.p+"img/img5.fb6c7b57.svg"}}]);
//# sourceMappingURL=tema3.e0ade374.js.map